## Alpha Features

### Opaque Integer Resources (Alpha Feature)

Opaque integer resources were introduced as an alpha feature in Kubernetes
v1.5. This feature allows cluster operators to advertise new node-level
resources that would be otherwise unknown to the system. Users can consume
these resources in pod specs just like CPU and memory. The scheduler takes care
of the resource accounting so that no more than the available amount is
simultaneously allocated to pods. So far only resource accounting is
implemented (but not node-level isolation.)

Opaque integer resources are resources that begin with the prefix
`pod.alpha.kubernetes.io/opaque-int-resource-`. The API server
restricts quantities of these resources to whole numbers. Examples of
_valid_ quantities are `3`, `3000m` and `3Ki`. Examples of _invalid_
quantities are `0.5` and `1500m`.

There are two steps required to use opaque integer resources. First, the
cluster operator must advertise a per-node opaque resource one or more node.
Second, users must request the opaque resource in pods.

To advertise a new opaque integer resource, the cluster operator should
submit a `PATCH` HTTP request to the API server to specify the available
quantity on a node in the cluster. After this operation, the node's
`status.capacity` will include a new resource. The `status.allocatable`
field is updated automatically with the new resource asychronously by
the Kubelet.

**Example:**

The HTTP request below advertises 5 "foo" resources on node `k8s-node-1`.

_NOTE: `~1` is the encoding for the character `/` in the patch path._

```http
PATCH /api/v1/nodes/k8s-node-1/status HTTP/1.1
Accept: application/json
Content-Type: application/json-patch+json
Host: k8s-master:8080

[
  {
    "op": "add",
    "path": "/status/capacity/pod.alpha.kubernetes.io~1opaque-int-resource-foo",
    "value": "5"
  }
]
```

To consume opaque resources in pods, include the name of the opaque
resource as a key in the the `spec.containers[].resources.requests` map.

The pod will be scheduled only if all of the resource requests are
satisfied (including cpu, memory and any opaque resources.) The pod will
remain in the `PENDING` state while the resource request cannot be met by any
node.

**Example:**

The pod below requests 2 cpus and 1 "foo" (an opaque resource.)

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
  - name: my-container
    image: myimage
    resources:
      requests:
        cpu: 2
        pod.alpha.kubernetes.io/opaque-int-resource-foo: 1
```
